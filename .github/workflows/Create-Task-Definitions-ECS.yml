
name: Deploy to Amazon ECS

on:
 workflow_dispatch:
   inputs:
     AWS_ACCOUNT:
       description: 'AWS account'
       required: true
       type: text
       default: 908410081654
     AWS_REGION:
       description: 'AWS region'
       required: true
       type: text
       default: eu-west-1
     ECR_REPO:
       description: 'ECR repository'
       required: true
       type: choice
       options:
          - common
          - aplication
     CONTAINER_NAME_NGINX:
        description: 'Container name first images'
        required: true      
        type: choice
        options:
           - magento_ecr_image_nginx
           - sigma_magento-php_fpm
           - php_magento
     IMAGE_TAG_NGINX:
      description: 'Image tag first images'
      required: true
      type: text
      default: nginx
     CONTAINER_NAME_PHP:
       description: 'Container name second images'
       required: true
       type: choice
       options:
          - magento_ecr_image_nginx
          - sigma_magento-php_fpm
          - php_magento
     IMAGE_TAG_PHP:
      description: 'Image tag second images'
      required: true
      type: text
      default:  php     
     ECS_CLUSTER_NAME:
       description: 'ECS cluster'
       required: true
       type: text
       default:  ecs-prod-0001
#      ECS_SERVICE_NAME:
#        description: 'ECS service'
#        required: true
#        type: text
#        default:  test3
     
env:
  ECS-TASK_DEFENITION-JSON_FILE:             ecs-task-definition.json 
   
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy ubuntu
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Git clone repo
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.AWS_REGION }}
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
       
    - name: Render Amazon ECS task definition for first container nginx
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS-TASK_DEFENITION-JSON_FILE }}
        container-name: ${{ github.event.inputs.CONTAINER_NAME_NGINX }}
        image: ${{ github.event.inputs.AWS_ACCOUNT }}.dkr.ecr.${{ github.event.inputs.AWS_REGION }}.amazonaws.com/${{ github.event.inputs.ECR_REPO }}:${{ github.event.inputs.IMAGE_TAG_NGINX }}
    
    - name: Render Amazon ECS task definition for second container php
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      id: task-def
      with:
        task-definition: ${{ env.ECS-TASK_DEFENITION-JSON_FILE }}
        container-name: ${{ github.event.inputs.CONTAINER_NAME_PHP }}
        image: ${{ github.event.inputs.AWS_ACCOUNT }}.dkr.ecr.${{ github.event.inputs.AWS_REGION }}.amazonaws.com/${{ github.event.inputs.ECR_REPO }}:${{ github.event.inputs.IMAGE_TAG_PHP }}
      
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
     #   service: ${{ github.event.inputs.ECS_SERVICE_NAME }}
     #   cluster: ${{ github.event.inputs.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
